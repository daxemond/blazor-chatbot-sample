@page "/"
@rendermode InteractiveServer
@using BlazorChatbot.Models
@using BlazorChatbot.Services;
@inject IChatService service;
<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<div class="container bootstrap snippets bootdey home-container" style="height: 100vh;">
    <div class="row h-100 bg-light">
        <div class="col-md-4 bg-white ">
            <div class=" row border-bottom padding-sm" style="height: 40px;">
                Messages From System Admin
            </div>

            <!-- =============================================================== -->
            <!-- Admin message list -->
            <ul class="friend-list">
                @foreach (var item in AdminMessages)
                {
                    <li class="active bounceInDown">
                        <a href="#" class="clearfix">
                            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" className="img-circle bi bi-person-gear" viewBox="0 0 16 16">
                                <path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0M8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4m.256 7a4.5 4.5 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10q.39 0 .74.025c.226-.341.496-.65.804-.918Q8.844 9.002 8 9c-5 0-6 3-6 4s1 1 1 1zm3.63-4.54c.18-.613 1.048-.613 1.229 0l.043.148a.64.64 0 0 0 .921.382l.136-.074c.561-.306 1.175.308.87.869l-.075.136a.64.64 0 0 0 .382.92l.149.045c.612.18.612 1.048 0 1.229l-.15.043a.64.64 0 0 0-.38.921l.074.136c.305.561-.309 1.175-.87.87l-.136-.075a.64.64 0 0 0-.92.382l-.045.149c-.18.612-1.048.612-1.229 0l-.043-.15a.64.64 0 0 0-.921-.38l-.136.074c-.561.305-1.175-.309-.87-.87l.075-.136a.64.64 0 0 0-.382-.92l-.148-.045c-.613-.18-.613-1.048 0-1.229l.148-.043a.64.64 0 0 0 .382-.921l-.074-.136c-.306-.561.308-1.175.869-.87l.136.075a.64.64 0 0 0 .92-.382zM14 12.5a1.5 1.5 0 1 0-3 0 1.5 1.5 0 0 0 3 0" />
                            </svg>
                            <div class="friend-name">
                                <strong>Kate</strong>
                            </div>
                            <div class="last-message text-muted">@item.Contents</div>
                            <small class="time text-muted">Just now</small>
                            <small class="chat-alert text-muted"><i class="fa fa-check"></i></small>
                        </a>
                    </li>
                }
              
            </ul>
        </div>

        <!--=========================================================-->
        <!-- selected chat -->
       
        <div class="col-md-8 bg-white ">
            <div class="chat-message">
                <ul class="chat">
                    @foreach (var m in Messages)
                    {
                        if (m.Type == "query")
                        {
                            <li class="left clearfix">
                                <span class="chat-img pull-left">
                                    <img src="images/sarah.png" alt="User Avatar">
                                </span>
                                <div class="chat-body clearfix fs-6">
                                    <div class="header">
                                        <strong class="primary-font">Sarah</strong>
                                        <small class="pull-right text-muted"><i class="fa fa-clock-o"></i>Just now</small>
                                    </div>
                                    <p>
                                        @m.Contents
                                    </p>
                                </div>
                            </li>
                        } else
                        {
                            <li class="right clearfix">
                                <span class="chat-img pull-right">
                                    <img src="images/guest-male.jpg" alt="User Avatar">
                                </span>
                                <div class="chat-body clearfix fs-6">
                                    <div class="header">
                                        <strong class="primary-font">John</strong>
                                        <small class="pull-right text-muted"><i class="fa fa-clock-o"></i>Just now</small>
                                    </div>
                                    <p>
                                        @m.Contents
                                    </p>
                                </div>
                            </li>
                        }
                    }
                </ul>
            </div>
@*             <EditForm Model="Input"  method="post" OnValidSubmit="SendQuery" FormName="query-form"> *@
@*                 <DataAnnotationsValidator /> *@
                <div class="chat-box bg-white">
                    <div class="input-group">
@*                         <InputText @bind-Value="Input.Query" class="form-control border no-shadow no-rounded" placeholder="Type your message here" /> *@
                    <input @bind-value="query" class="form-control border no-shadow no-rounded" onclick="this.value=''" placeholder="Type your message here" />
                        <span class="input-group-btn">
                        <button class="btn btn-success no-rounded" @onclick="async () => await SendQuery(query)">Send</button>
                        </span>
                    </div><!-- /input-group -->
                </div>
@*             </EditForm> *@

        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private ChatRequestModel Input { get; set; } = new();
    private string query { get; set; } = string.Empty;

    private List<AdminMessageItem> AdminMessages = [
        new AdminMessageItem() {
            Contents="Hi, I'm Kate, the system administrator. We're excited to demonstrate a small talk chatbot today. I'll be fine-tuned to improve responses, so thanks for your patience—and have fun!"
        }
    ];

    //private List<MessageQueryItem> Messages = new();

    private List<MessageQueryItem> Messages = [
        new MessageQueryItem() {
            Type = "message",
            Contents = "Hello there! What can I help you with today?"
        }
    ];


    public async Task SendQuery(string query)
    {
        if (!string.IsNullOrEmpty(query))
        {
            Messages.Add(new MessageQueryItem()
                {
                    Type = "query",
                    Contents = query
                });
            string message = await service.GetResponse(query ?? "");
            Messages.Add(new MessageQueryItem()
                {
                    Type = "message",
                    Contents = message
                });
            query = string.Empty;
        }

    }
}